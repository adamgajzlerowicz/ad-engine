window.Wikia=window.Wikia||{},window.Wikia.adServices=function(e){var t={};function r(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:s})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t){e.exports=window.Wikia.adEngine},function(e,t,r){"use strict";r.r(t);var s=r(0);const i="executor";class n{constructor(){this.methods={}}register(e,t){s.utils.logger(i,`method ${e} registered`),this.methods[e]=t}execute(e,t,r){const n=this.methods[e];if("function"!=typeof n)throw Error(`${e} is not executable`);s.utils.logger(i,`executing ${e} method`,t.name,r),n(t,r)}executeMethods(e,t){Object.keys(t).forEach(r=>{const{result:s}=t[r],i=e.find(e=>e.name===r&&e.executable);if(!i)return;const n=i[`on_${s}`];n&&n.forEach(e=>this.execute(e,i,s))})}}const o="project-handler";class a{constructor(){this.projects={}}enable(e){s.utils.logger(o,`project ${e} enabled`),this.projects[e]=!0}isEnabled(e){return!!this.projects[e]}getEnabledModelsWithParams(e){const t=s.context.get("services.billTheLizard.projects"),r=s.context.get("services.billTheLizard.parameters"),i=[],n={};return Object.keys(t).filter(t=>this.isEnabled(t)&&e.includes(t)).forEach(e=>{let o=!0;t[e].forEach(t=>{s.utils.isProperGeo(t.countries,t.name)?(t.executable=o,o=!1,i.push(t),Object.assign(n,r[e])):t.executable=!1})}),{models:i,parameters:n}}}const c="bill-the-lizard";function l(e,t,r={},i=0,n){const o=new XMLHttpRequest,a=function(e){const t=[];return Object.keys(e).forEach(r=>{t.push(`${r}=${e[r]}`)}),encodeURI(t.join("&"))}(r),l=function(e,t,r){return`${e}/${t}?${r}`}(e,t,a);return s.events.emit(s.events.BILL_THE_LIZARD_REQUEST,{query:a,callId:n}),o.open("GET",l,!0),o.responseType="json",o.timeout=i,s.utils.logger(c,"timeout configured to",o.timeout),new Promise((e,t)=>{o.addEventListener("timeout",()=>{t(new Error("timeout")),s.utils.logger(c,"timed out")}),o.addEventListener("error",()=>{t(new Error("error")),s.utils.logger(c,"errored")}),o.onreadystatechange=function(){4===this.readyState&&200===this.status&&(s.utils.logger(c,"has response"),e(this.response))},o.send()})}s.events.registerEvent("BILL_THE_LIZARD_REQUEST"),s.events.registerEvent("BILL_THE_LIZARD_RESPONSE");class u{constructor(){this.executor=new n,this.statuses={},this.projectsHandler=new a,this.predictions=[],this.callCounter=0,this.targetedModelNames=new Set}call(e,t){if(!s.context.get("services.billTheLizard.enabled"))return s.utils.logger(c,"disabled"),new Promise((e,t)=>t(new Error("Disabled")));t||(this.callCounter+=1,t=this.callCounter);const r=s.context.get("services.billTheLizard.host"),i=s.context.get("services.billTheLizard.endpoint"),n=s.context.get("services.billTheLizard.timeout"),{models:o,parameters:a}=this.projectsHandler.getEnabledModelsWithParams(e);if(!o||o.length<1)return s.utils.logger(c,"no models to predict"),this.statuses[t]=u.NOT_USED,Promise.resolve({});o.filter(e=>e.dfp_targeting).forEach(e=>this.targetedModelNames.add(e.name));const d=function(e,t){const r=new Date,s=r.getDay()-1;return Object.assign({},{models:e.map(e=>e.name),h:r.getHours(),dow:-1===s?6:s},t)}(o,a);return s.utils.logger(c,"calling service",r,i,d,`callId: ${t}`),this.statuses[t]=u.TOO_LATE,l(r,i,d,n,t).catch(e=>("timeout"===e.message?this.statuses[t]=u.TIMEOUT:this.statuses[t]=u.FAILURE,Promise.reject(e))).then(e=>(function(e){return Object.keys(e).forEach(t=>{const r=s.utils.queryString.get(`bill.${t}`);r&&(e[t].result=parseInt(r,10))}),e})(e)).then(e=>{s.utils.logger(c,"service response OK",`callId: ${t}`),this.statuses[t]=u.ON_TIME;const r=this.getModelToResultMap(e);s.utils.logger(c,"predictions",r,`callId: ${t}`);const i=this.buildPredictions(o,r,t);return this.predictions.push(...i),this.setTargeting(),s.events.emit(s.events.BILL_THE_LIZARD_RESPONSE,{callId:t,response:this.serialize(t)}),this.executor.executeMethods(o,e),r}).catch(e=>(s.utils.logger(c,"service response",e.message,`callId: ${t}`),{}))}buildPredictions(e,t,r){return e.map(e=>e.name).filter(e=>void 0!==t[e]).map(e=>({modelName:e,callId:r,result:t[e]}))}getModelToResultMap(e){const t={};return Object.keys(e).forEach(r=>{const{result:s}=e[r];void 0!==s&&(t[r]=s)}),t}setTargeting(){const e=this.getTargeting();if(Object.keys(e).length>0){const t=Object.entries(e).map(([e,t])=>`${e}_${t}`);return s.context.set("targeting.btl",t),t}return""}getTargeting(){const e={};return this.predictions.filter(e=>this.targetedModelNames.has(e.modelName)).forEach(t=>{e[t.modelName]=t.result}),e}getPrediction(e,t){return this.getPredictions(e).find(e=>e.callId===t)}getPredictions(e){return e?this.predictions.filter(t=>t.modelName.split(":")[0]===e.split(":")[0]):this.predictions}getResponseStatus(e){return e=e||this.callCounter,this.statuses[e]}serialize(e){let{predictions:t}=this;return void 0!==e&&(t=t.filter(t=>t.callId===e)),t.map(e=>`${e.modelName}|${e.callId}=${e.result}`).join(";")}}u.FAILURE="failure",u.NOT_USED="not_used",u.ON_TIME="on_time",u.TIMEOUT="timeout",u.TOO_LATE="too_late";const d=new u,g="geo-edge",m="d3b02estmut877";const h=new class{call(){const e=s.context.get("services.geoEdge.id"),t=s.context.get("services.geoEdge.config");return s.context.get("services.geoEdge.enabled")&&e?(s.utils.logger(g,"loading"),window.grumi={cfg:t,key:e},function(){const e=`//${m}.cloudfront.net/grumi-ip.js`;return s.utils.scriptLoader.loadScript(e,"text/javascript",!0,"first")}().then(()=>{s.utils.logger(g,"ready")})):(s.utils.logger(g,"disabled"),Promise.resolve())}},p="krux";function f(e){if(window.localStorage)return window.localStorage[e];if(window.navigator.cookieEnabled){const t=document.cookie.match(`${e}=([^;]*)`);return t&&decodeURI(t[1])||""}return""}window.Krux=window.Krux||function(...e){window.Krux.q.push(e)},window.Krux.q=window.Krux.q||[];const x=new class{call(){return s.context.get("services.krux.enabled")&&s.context.get("options.trackingOptIn")?(s.utils.logger(p,"loading"),function(){const e=`//cdn.krxd.net/controltag?confid=${s.context.get("services.krux.id")}`;return s.utils.scriptLoader.loadScript(e,"text/javascript",!0,"first",{id:"krux-control-tag"})}().then(()=>{this.exportPageParams(),this.importUserData()})):(s.utils.logger(p,"disabled"),Promise.resolve())}exportPageParams(){Object.keys(s.context.get("targeting")).forEach(e=>{const t=s.context.get(`targeting.${e}`);t&&(window[`kruxDartParam_${e}`]=t)})}importUserData(){const e=f("kxuser"),t=f("kxsegs");s.context.set("targeting.kuid",e||null),s.context.set("targeting.ksg",t?t.split(","):[]),s.utils.logger(p,"data set",e,t)}getUserId(){return s.context.get("targeting.kuid")||null}getSegments(){return s.context.get("targeting.ksg")||[]}},w="moat-yi";s.events.registerEvent("MOAT_YI_READY");const E=new class{call(){if(!s.context.get("services.moatYi.enabled")||!s.context.get("services.moatYi.partnerCode"))return s.utils.logger(w,"disabled"),Promise.resolve();let e;const t=new Promise(t=>{e=t});return s.utils.logger(w,"loading"),window.moatYieldReady=(()=>{this.importPageParams(),e()}),s.context.set("targeting.m_data","waiting"),function(){const e=`//z.moatads.com/${s.context.get("services.moatYi.partnerCode")}/yi.js`;return s.utils.scriptLoader.loadScript(e,"text/javascript",!0,"first")}().then(()=>{s.utils.logger(w,"ready")}),t}importPageParams(){if(window.moatPrebidApi&&"function"==typeof window.moatPrebidApi.getMoatTargetingForPage){const e=window.moatPrebidApi.getMoatTargetingForPage()||{};s.context.set("targeting.m_data",e.m_data),s.events.emit(s.events.MOAT_YI_READY,`m_data=${e.m_data}`),s.utils.logger(w,"moatYieldReady",e)}}};r.d(t,"BillTheLizard",function(){return u}),r.d(t,"billTheLizard",function(){return d}),r.d(t,"geoEdge",function(){return h}),r.d(t,"krux",function(){return x}),r.d(t,"moatYi",function(){return E})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,